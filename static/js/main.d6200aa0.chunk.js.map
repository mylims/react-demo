{"version":3,"sources":["components/Info.tsx","components/tailwind-ui/svg/heroicon/solid/SolidUpload.tsx","components/tailwind-ui/svg/heroicon/solid/SolidZoomOut.tsx","components/tailwind-ui/types.ts","components/tailwind-ui/forms/basic/Dropzone.tsx","components/tailwind-ui/util.ts","components/tailwind-ui/elements/buttons/utils.ts","components/tailwind-ui/elements/buttons/Button.tsx","components/tailwind-ui/elements/buttons/ButtonGroup.tsx","components/tailwind-ui/elements/pagination/paginate.ts","components/tailwind-ui/elements/pagination/Pagination.tsx","components/tailwind-ui/lists/Table.tsx","components/tailwind-ui/svg/heroicon/outline/OutlineX.tsx","components/tailwind-ui/forms/basic/DropzoneList.tsx","components/tailwind-ui/hooks/useDropzone.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["MetaTable","meta","className","Object","keys","map","key","Info","text","ndParse","data","width","height","margin","bottom","left","top","right","x","y","label","showGridLines","tickFormat","formatPrefix","labelSpace","SvgSolidUpload","title","titleId","props","viewBox","fill","aria-labelledby","id","fillRule","d","clipRule","SvgSolidZoomOut","Color","Size","Variant","Dropzone","message","header","otherProps","accepted","accept","split","element","toLowerCase","startsWith","slice","includes","join","useDropzone","getRootProps","getInputProps","isDragActive","fileRejections","isDragReject","isDragAccept","clsx","disabled","undefined","maxSize","String","bytesize","length","file","name","_userAgent","navigator","userAgent","sizes","xSmall","small","medium","large","xLarge","colorsPrimary","primary","neutral","success","warning","danger","alternative","colorsSecondary","colorsWhite","getVariantColor","variant","color","secondary","white","Error","component","Button","ref","size","group","children","type","React","forwardRef","ButtonGroup","elements","Children","child","index","cloneElement","ELLIPSIS","range","from","to","result","i","push","Pagination","totalCount","page","itemsPerPage","onPageChange","maxVisiblePages","pagesPerSide","withText","totalPages","Math","ceil","useMemo","goPrevious","goNext","goTo","num","pages","currentPage","maxPagesWithoutEllipsis","half","aroundMiddle","floor","pagination","middle","max","paginate","prevDisabled","nextDisabled","Text","total","onClick","style","minWidth","Table","Tr","Empty","Header","value","SvgOutlineX","stroke","strokeLinecap","strokeLinejoin","strokeWidth","DropzoneList","files","onRemove","delete","DropzonListRow","DropzoneTd","maxWidth","useSingleFileDrozone","config","droppedFiles","options","replace","dropzoneProps","useState","setFiles","removeFile","fileToRemove","filter","onDrop","newFiles","concat","newFile","dropzoneListProps","maxFiles","multiple","App","setText","then","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6200aa0.chunk.js","sourcesContent":["import React from 'react';\nimport { ndParse } from 'ndim-parser';\nimport { Plot, LineSeries, XAxis, YAxis } from 'react-plot';\nimport { formatPrefix } from 'd3-format';\n\ninterface InfoProps {\n  text: string;\n}\n\ninterface MetaTableProps {\n  meta: Record<string, string>;\n}\n\nfunction MetaTable({ meta }: MetaTableProps) {\n  return (\n    <div className=\"p-5 m-2 shadow sm:rounded-lg\">\n      <div className=\"text-2xl font-semibold text-blue-500\">Metadata</div>\n      <table>\n        <tbody className=\"inline-block overflow-auto border-t border-gray-200 h-96\">\n          {Object.keys(meta).map((key) => (\n            <tr key={key}>\n              <td className=\"font-medium\">{key}</td>\n              <td>{meta[key]}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\nexport default function Info({ text }: InfoProps) {\n  const { data, meta } = ndParse(text);\n\n  return (\n    <div className=\"flex flex-wrap justify-center\">\n      <MetaTable meta={meta} />\n      <div className=\"m-2 shadow sm:rounded-lg\">\n        <Plot\n          width={500}\n          height={500}\n          margin={{ bottom: 70, left: 100, top: 10, right: 10 }}\n        >\n          <LineSeries\n            data={{ x: data.x.data, y: data.y.data }}\n            label=\"Vg = 3V\"\n          />\n          <XAxis label={`${data.x.label} [V]`} showGridLines={true} />\n          <YAxis\n            label={`${data.y.label} [fF]`}\n            showGridLines={true}\n            tickFormat={formatPrefix(',.00', 1e-13)}\n            labelSpace={50}\n          />\n        </Plot>\n      </div>\n    </div>\n  );\n}\n","import * as React from 'react';\ninterface SVGRProps {\n  title?: string;\n  titleId?: string;\n}\n\nfunction SvgSolidUpload({\n  title,\n  titleId,\n  ...props\n}: React.SVGProps<SVGSVGElement> & SVGRProps) {\n  return (\n    <svg\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n      aria-labelledby={titleId}\n      {...props}\n    >\n      {title ? <title id={titleId}>{title}</title> : null}\n      <path\n        fillRule=\"evenodd\"\n        d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n}\n\nexport default SvgSolidUpload;\n","import * as React from 'react';\ninterface SVGRProps {\n  title?: string;\n  titleId?: string;\n}\n\nfunction SvgSolidZoomOut({\n  title,\n  titleId,\n  ...props\n}: React.SVGProps<SVGSVGElement> & SVGRProps) {\n  return (\n    <svg\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n      aria-labelledby={titleId}\n      {...props}\n    >\n      {title ? <title id={titleId}>{title}</title> : null}\n      <path\n        fillRule=\"evenodd\"\n        d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n        clipRule=\"evenodd\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        d=\"M5 8a1 1 0 011-1h4a1 1 0 110 2H6a1 1 0 01-1-1z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n}\n\nexport default SvgSolidZoomOut;\n","export enum Color {\n  primary = 'primary',\n  neutral = 'neutral',\n  success = 'success',\n  warning = 'warning',\n  danger = 'danger',\n  alternative = 'alternative',\n}\n\nexport enum Size {\n  xSmall = 'xSmall',\n  small = 'small',\n  medium = 'medium',\n  large = 'large',\n  xLarge = 'xLarge',\n}\n\nexport enum Variant {\n  primary = 'primary',\n  secondary = 'secondary',\n  white = 'white',\n}\n\nexport type ActionType<Action, Payload = void> = Payload extends void\n  ? { type: Action }\n  : { type: Action; payload: Payload };\n\nexport type PropsOf<T = unknown> = T extends React.ElementType\n  ? React.ComponentProps<T>\n  : never;\n","import bytesize from 'byte-size';\nimport clsx from 'clsx';\nimport React, { ReactNode } from 'react';\nimport { DropzoneProps as DropzoneLibProps, useDropzone } from 'react-dropzone';\n\nimport { SvgSolidUpload } from '../../svg/heroicon/solid';\n\nexport interface DropzoneProps extends DropzoneLibProps {\n  header?: ReactNode;\n  message?: ReactNode;\n}\n\nexport function Dropzone(props: DropzoneProps): JSX.Element {\n  const { message, header, ...otherProps } = props;\n  const accepted =\n    typeof props.accept === 'string'\n      ? props.accept\n          .split(',')\n          .map((element) => {\n            element = element.toLowerCase();\n            if (element.startsWith('.')) {\n              // An extension was passed.\n              return element.slice(1);\n            } else if (element.includes('/')) {\n              // A mime type was passed.\n              return element.split('/')[1];\n            }\n            return element;\n          })\n          .join(', ')\n      : '';\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    fileRejections,\n    isDragReject,\n    isDragAccept,\n  } = useDropzone(otherProps);\n\n  return (\n    <div\n      {...getRootProps()}\n      className={clsx(\n        'border-2 border-dashed rounded-md focus:outline-none focus:ring focus:border-transparent',\n        {\n          'border-primary-500 focus:ring-primary-500': isDragAccept,\n          'border-neutral-300 focus:ring-primary-500': !isDragActive,\n          'border-danger-500 focus:ring-danger-500': isDragReject,\n        },\n      )}\n    >\n      <input {...getInputProps()} />\n      <div className=\"mt-2 sm:mt-0 sm:col-span-2\">\n        <div\n          className={clsx(\n            'flex justify-center px-6 pt-5 pb-6',\n            props.disabled ? 'cursor-default' : 'cursor-pointer',\n          )}\n        >\n          <div className=\"text-center\">\n            {header !== undefined ? (\n              header\n            ) : (\n              <SvgSolidUpload className=\"w-12 h-12 mx-auto text-neutral-300\" />\n            )}\n            <div className=\"mt-1 text-sm text-neutral-600\">\n              {message ? (\n                message\n              ) : (\n                <p>\n                  <span className=\"font-medium text-primary-600 hover:text-primary-500\">\n                    Upload a file\n                  </span>{' '}\n                  or drag and drop\n                </p>\n              )}\n            </div>\n            <div className=\"mt-1 text-xs\">\n              <div className=\"text-neutral-500\">\n                {props.accept && <>{accepted}</>}{' '}\n                {props.maxSize && <>up to {String(bytesize(props.maxSize))}</>}\n              </div>\n\n              {fileRejections.length > 0 && (\n                <p\n                  title={fileRejections.map(({ file }) => file.name).join(', ')}\n                  className=\"text-danger-500\"\n                >\n                  {fileRejections.length} file\n                  {fileRejections.length > 1 ? 's were' : ' was'} not accepted.\n                </p>\n              )}\n\n              {isDragReject && (\n                <p className=\"text-danger-500\">File not accepted</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\n/*\n * Use this function to create a Component with ref button\n * https://github.com/tailwindlabs/headlessui/blob/24725216e4e2fb9280bdf3b96583a9fe573410e4/packages/%40headlessui-react/src/utils/render.ts#L175-L181\n */\nexport function forwardRefWithAs<T>(component: T): T {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return React.forwardRef((component as unknown) as any) as any;\n}\n\nconst _userAgent = typeof navigator !== 'undefined' ? navigator.userAgent : '';\nexport const commandKeyExists =\n  _userAgent.includes('Macintosh') ||\n  _userAgent.includes('iPad') ||\n  _userAgent.includes('iPhone');\n","import { Size, Color, Variant } from '../../types';\n\nconst sizes: Record<Size, string> = {\n  [Size.xSmall]: 'px-2.5 py-1.5 text-xs',\n  [Size.small]: 'px-3 py-2 text-sm',\n  [Size.medium]: 'px-4 py-2 text-sm',\n  [Size.large]: 'px-4 py-2 text-base',\n  [Size.xLarge]: 'px-6 py-3 text-base',\n};\n\nconst colorsPrimary: Record<Color, string> = {\n  [Color.primary]:\n    'border border-transparent bg-primary-600 disabled:bg-primary-400 hover:bg-primary-700 focus:ring-primary-500 active:bg-primary-800',\n  [Color.neutral]:\n    'border border-transparent bg-neutral-600 disabled:bg-neutral-400 hover:bg-neutral-700 focus:ring-neutral-500 active:bg-neutral-800',\n  [Color.success]:\n    'border border-transparent bg-success-600 disabled:bg-success-400 hover:bg-success-700 focus:ring-success-500 active:bg-success-800',\n  [Color.warning]:\n    'border border-transparent bg-warning-600 disabled:bg-warning-400 hover:bg-warning-700 focus:ring-warning-500 active:bg-warning-800',\n  [Color.danger]:\n    'border border-transparent bg-danger-600 disabled:bg-danger-400 hover:bg-danger-700 focus:ring-danger-500 active:bg-danger-800',\n  [Color.alternative]:\n    'border border-transparent bg-alternative-600 disabled:bg-alternative-400 hover:bg-alternative-700 focus:ring-alternative-500 active:bg-alternative-800',\n};\n\nconst colorsSecondary: Record<Color, string> = {\n  [Color.primary]:\n    'border border-transparent text-primary-700 disabled:text-primary-400 bg-primary-100 disabled:bg-primary-50 hover:bg-primary-200 focus:ring-primary-500 active:bg-primary-300',\n  [Color.neutral]:\n    'border border-transparent text-neutral-700 disabled:text-neutral-400 bg-neutral-100 disabled:bg-neutral-50 hover:bg-neutral-200 focus:ring-neutral-500 active:bg-neutral-300',\n  [Color.success]:\n    'border border-transparent text-success-700 disabled:text-success-400 bg-success-100 disabled:bg-success-50 hover:bg-success-200 focus:ring-success-500 active:bg-success-300',\n  [Color.warning]:\n    'border border-transparent text-warning-700 disabled:text-warning-400 bg-warning-100 disabled:bg-warning-50 hover:bg-warning-200 focus:ring-warning-500 active:bg-warning-300',\n  [Color.danger]:\n    'border border-transparent text-danger-700 disabled:text-danger-400 bg-danger-100 disabled:bg-danger-50 hover:bg-danger-200 focus:ring-danger-500 active:bg-danger-300',\n  [Color.alternative]:\n    'border border-transparent text-alternative-700 disabled:text-alternative-400 bg-alternative-100 disabled:bg-alternative-50 hover:bg-alternative-200 focus:ring-alternative-500 active:bg-alternative-300',\n};\n\nconst colorsWhite: Record<Color, string> = {\n  [Color.primary]:\n    'border border-neutral-300 text-neutral-700 disabled:text-neutral-400 bg-white disabled:bg-white hover:bg-neutral-50 focus:ring-primary-500 active:bg-neutral-100',\n  [Color.neutral]:\n    'border border-neutral-300 text-neutral-700 disabled:text-neutral-400 bg-white disabled:bg-white hover:bg-neutral-50 focus:ring-primary-500 active:bg-neutral-100',\n  [Color.success]:\n    'border border-neutral-300 text-neutral-700 disabled:text-neutral-400 bg-white disabled:bg-white hover:bg-neutral-50 focus:ring-primary-500 active:bg-neutral-100',\n  [Color.warning]:\n    'border border-neutral-300 text-neutral-700 disabled:text-neutral-400 bg-white disabled:bg-white hover:bg-neutral-50 focus:ring-primary-500 active:bg-neutral-100',\n  [Color.danger]:\n    'border border-neutral-300 text-neutral-700 disabled:text-neutral-400 bg-white disabled:bg-white hover:bg-neutral-50 focus:ring-primary-500 active:bg-neutral-100',\n  [Color.alternative]:\n    'border border-neutral-300 text-neutral-700 disabled:text-neutral-400 bg-white disabled:bg-white hover:bg-neutral-50 focus:ring-primary-500 active:bg-neutral-100',\n};\n\nfunction getVariantColor(variant: Variant, color: Color): string {\n  switch (variant) {\n    case Variant.primary:\n      return colorsPrimary[color];\n    case Variant.secondary:\n      return colorsSecondary[color];\n    case Variant.white:\n      return colorsWhite[color];\n    default:\n      throw new Error('Variant cannot be null');\n  }\n}\n\nexport { sizes, getVariantColor, colorsPrimary, colorsSecondary, colorsWhite };\n","import clsx from 'clsx';\nimport React, { ReactNode, Ref } from 'react';\n\nimport { Color, Size, Variant } from '../../types';\nimport { forwardRefWithAs } from '../../util';\n\nimport { getVariantColor, sizes } from './utils';\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: ReactNode;\n  type?: 'button' | 'submit';\n  color?: Color;\n  size?: Size;\n  variant?: Variant;\n  group?: string;\n  ref?: Ref<HTMLButtonElement>;\n}\n\nexport const Button = forwardRefWithAs(\n  (props: ButtonProps, ref: Ref<HTMLButtonElement>) => {\n    const {\n      color = Color.primary,\n      size = Size.medium,\n      variant = Variant.primary,\n      group,\n      children,\n      type = 'button',\n      className,\n      ...otherProps\n    } = props;\n\n    return (\n      <button\n        type={type === 'submit' ? 'submit' : 'button'}\n        {...otherProps}\n        ref={ref}\n        className={clsx(\n          'font-medium text-white focus:outline-none',\n          getVariantColor(variant, color),\n          sizes[size],\n          className,\n          {\n            'cursor-default': props.disabled,\n            'rounded-l-md': group === 'left',\n            '-ml-px': group && group !== 'left',\n            'rounded-r-md': group === 'right',\n            'rounded-md shadow-sm focus:ring-2 focus:ring-offset-2': !group,\n            'focus:ring-1 focus:z-10': group,\n          },\n        )}\n      >\n        {children}\n      </button>\n    );\n  },\n);\n","import React from 'react';\n\nimport { Variant, Color } from '../../types';\n\nexport interface ButtonGroupProps {\n  variant?: Variant;\n  color?: Color;\n  size?: number;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  children: any[];\n}\n\nexport function ButtonGroup(props: ButtonGroupProps): JSX.Element {\n  const { children, variant = Variant.primary, color = Color.primary } = props;\n\n  const elements = React.Children.map(children, (child, index) => {\n    const group =\n      index === 0\n        ? 'left'\n        : index === (props.size ? props.size - 1 : props.children.length - 1)\n        ? 'right'\n        : 'middle';\n\n    return React.cloneElement(child, {\n      group,\n      variant: child.props.variant ? child.props.variant : variant,\n      color,\n    });\n  });\n\n  return (\n    <span className=\"relative z-0 inline-flex rounded-md shadow-sm\">\n      {elements}\n    </span>\n  );\n}\n","export const ELLIPSIS = '…';\n\nexport function paginate(\n  currentPage: number,\n  totalPages: number,\n  maxVisiblePages: number,\n  pagesPerSide: number,\n) {\n  const maxPagesWithoutEllipsis = pagesPerSide * 2 + 2 + maxVisiblePages;\n  if (totalPages <= maxPagesWithoutEllipsis) {\n    return range(1, totalPages);\n  }\n\n  const half = Math.ceil(maxPagesWithoutEllipsis / 2);\n  const aroundMiddle = Math.floor(maxVisiblePages / 2);\n\n  const pagination: Array<number | typeof ELLIPSIS> = [];\n\n  if (currentPage <= half) {\n    pagination.push(...range(1, half));\n  } else {\n    pagination.push(...range(1, pagesPerSide));\n    pagination.push(ELLIPSIS);\n    if (currentPage > totalPages - half) {\n      pagination.push(\n        ...range(totalPages - half - aroundMiddle + 1, totalPages),\n      );\n      return pagination;\n    } else {\n      pagination.push(...range(currentPage - aroundMiddle, currentPage));\n    }\n  }\n\n  if (currentPage > totalPages - half) {\n    pagination.push(...range(currentPage + 1, totalPages));\n  } else {\n    const middle = Math.max(currentPage, half);\n    pagination.push(...range(middle + 1, middle + aroundMiddle));\n    pagination.push(ELLIPSIS);\n    pagination.push(...range(totalPages - pagesPerSide + 1, totalPages));\n  }\n  return pagination;\n}\n\nfunction range(from: number, to: number) {\n  const result: number[] = [];\n  for (let i = from; i <= to; i++) {\n    result.push(i);\n  }\n  return result;\n}\n","import clsx from 'clsx';\nimport React, { useMemo } from 'react';\n\nimport { Variant } from '../../types';\nimport { Button } from '../buttons/Button';\nimport { ButtonGroup } from '../buttons/ButtonGroup';\n\nimport { paginate, ELLIPSIS } from './paginate';\n\nexport interface PaginationProps {\n  totalCount: number;\n  page: number;\n  itemsPerPage: number;\n  onPageChange: (newPage: number, previousPage: number) => void;\n  maxVisiblePages?: number;\n  pagesPerSide?: number;\n  withText?: boolean;\n}\n\nexport function Pagination(props: PaginationProps) {\n  const {\n    totalCount,\n    page,\n    itemsPerPage,\n    onPageChange,\n    maxVisiblePages = 3,\n    pagesPerSide = 1,\n    withText = false,\n  } = props;\n\n  const totalPages = Math.ceil(totalCount / itemsPerPage);\n  const { goPrevious, goNext, pages, goTo } = useMemo(() => {\n    const goPrevious = () => onPageChange(page - 1, page);\n    const goNext = () => onPageChange(page + 1, page);\n    const goTo = (num: number) => onPageChange(num, page);\n\n    const pagination = paginate(\n      page,\n      totalPages,\n      maxVisiblePages,\n      pagesPerSide,\n    );\n\n    const pages = pagination;\n\n    return {\n      goPrevious,\n      goNext,\n      goTo,\n      pages,\n    };\n  }, [page, totalPages, onPageChange, maxVisiblePages, pagesPerSide]);\n\n  const prevDisabled = page === 1;\n  const nextDisabled = page === totalPages;\n\n  if (pages.length < 2) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex items-center justify-between px-4 py-3 bg-white border-t border-neutral-200 sm:px-6\">\n      <div\n        className={clsx('flex items-center flex-1', {\n          'justify-between': withText === true,\n          'justify-center': withText === false,\n        })}\n      >\n        {withText && <Text page={page} total={totalPages} />}\n        <div>\n          <nav className=\"relative z-0 inline-flex shadow-sm\">\n            <ButtonGroup variant={Variant.white} size={pages.length + 2}>\n              <Button disabled={prevDisabled} onClick={goPrevious}>\n                Previous\n              </Button>\n\n              {pages.map((element, index) => {\n                return (\n                  <Button\n                    className={clsx({\n                      'border border-neutral-300': page === element,\n                    })}\n                    style={{ minWidth: '3rem' }}\n                    variant={\n                      element === page ? Variant.secondary : Variant.white\n                    }\n                    key={element === ELLIPSIS ? `${ELLIPSIS}${index}` : element}\n                    disabled={element === ELLIPSIS}\n                    onClick={\n                      element === ELLIPSIS ? undefined : () => goTo(element)\n                    }\n                  >\n                    {element}\n                  </Button>\n                );\n              })}\n\n              <Button disabled={nextDisabled} onClick={goNext}>\n                Next\n              </Button>\n            </ButtonGroup>\n          </nav>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction Text(props: { page: number; total: number }): JSX.Element {\n  return (\n    <div>\n      <p className=\"text-sm text-neutral-700\">\n        Showing page\n        <span className=\"font-medium\"> {props.page} </span>\n        of\n        <span className=\"font-medium\"> {props.total} </span>\n        pages.\n      </p>\n    </div>\n  );\n}\n","import React, {\n  ComponentType,\n  TdHTMLAttributes,\n  ThHTMLAttributes,\n} from 'react';\n\nimport { Pagination, PaginationProps } from '../elements/pagination/Pagination';\n\nexport interface TrProps<T> {\n  index: number;\n  value: T;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface TableProps<T = any> {\n  data: Array<T>;\n  Tr: ComponentType<TrProps<T>>;\n  Empty?: ComponentType;\n  Header?: ComponentType;\n\n  pagination?: PaginationProps;\n  itemsPerPage?: number;\n}\n\nexport function Table<T extends { id: number | string }>(props: TableProps<T>) {\n  const { data, Tr, Empty, Header, pagination } = props;\n\n  if (data.length === 0) {\n    return Empty ? <Empty /> : null;\n  }\n\n  return (\n    <div className=\"flex flex-col\">\n      <div>\n        <div className=\"inline-block min-w-full overflow-hidden align-middle border-b shadow border-neutral-200 sm:rounded-lg\">\n          <table className=\"min-w-full divide-y divide-neutral-200\">\n            {Header && (\n              <thead>\n                <Header />\n              </thead>\n            )}\n            <tbody className=\"bg-white divide-y divide-neutral-200\">\n              {data.map((value, index) => (\n                <Tr key={value.id} index={index} value={value} />\n              ))}\n            </tbody>\n          </table>\n          {pagination && (\n            <div>\n              <Pagination {...pagination} />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport type TdProps = TdHTMLAttributes<HTMLTableDataCellElement>;\nexport type ThProps = ThHTMLAttributes<HTMLTableHeaderCellElement>;\n\nexport function Td(props: TdProps) {\n  return (\n    <td\n      className=\"px-6 py-4 text-sm font-medium whitespace-nowrap text-neutral-900\"\n      {...props}\n    />\n  );\n}\n\nexport function Th(props: ThProps) {\n  return (\n    <th\n      className=\"px-6 py-3 text-xs font-medium tracking-wider text-left uppercase text-neutral-500 bg-neutral-50\"\n      {...props}\n    />\n  );\n}\n","import * as React from 'react';\ninterface SVGRProps {\n  title?: string;\n  titleId?: string;\n}\n\nfunction SvgOutlineX({\n  title,\n  titleId,\n  ...props\n}: React.SVGProps<SVGSVGElement> & SVGRProps) {\n  return (\n    <svg\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      aria-labelledby={titleId}\n      {...props}\n    >\n      {title ? <title id={titleId}>{title}</title> : null}\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={2}\n        d=\"M6 18L18 6M6 6l12 12\"\n      />\n    </svg>\n  );\n}\n\nexport default SvgOutlineX;\n","import bytesize from 'byte-size';\nimport clsx from 'clsx';\nimport React from 'react';\n\nimport { Table, TdProps } from '../../lists/Table';\nimport { SvgOutlineX } from '../../svg/heroicon/outline';\n\ninterface DropzoneListFile {\n  id: string;\n  file: File;\n  delete: () => void;\n}\n\ninterface DropzoneListRowProps {\n  value: DropzoneListFile;\n}\n\nexport interface DropzoneListProps {\n  files?: File[] | undefined;\n  onRemove: (file: File) => void;\n}\n\nexport function DropzoneList({\n  files,\n  onRemove,\n}: DropzoneListProps): JSX.Element | null {\n  if (files === undefined || files.length === 0) {\n    return null;\n  }\n\n  const data: DropzoneListFile[] = files.map((value) => {\n    return {\n      id: value.name,\n      file: value,\n      delete: () => onRemove(value),\n    };\n  });\n\n  return (\n    <div className=\"w-full mt-1\">\n      <Table data={data} Tr={DropzonListRow} />\n    </div>\n  );\n}\n\nfunction DropzonListRow({ value: props }: DropzoneListRowProps) {\n  return (\n    <tr\n      className={clsx(\n        'w-full min-w-full bg-transparent shadow-none border-neutral-300 border-dashed rounded-md',\n      )}\n    >\n      <DropzoneTd style={{ maxWidth: 300 }} className=\"px-2 truncate\">\n        {props.file.name}\n      </DropzoneTd>\n\n      <DropzoneTd>{String(bytesize(props.file.size))}</DropzoneTd>\n\n      <DropzoneTd className=\"px-2 my-2 text-sm font-medium text-right whitespace-nowrap text-neutral-900\">\n        <button\n          type=\"button\"\n          onClick={props.delete}\n          className=\"inline-flex rounded-md p-1.5 focus:outline-none focus:ring-2 text-primary-500 hover:bg-primary-100 active:bg-primary-200 focus:ring-primary-600\"\n        >\n          <SvgOutlineX className=\"w-5 h-5\" />\n        </button>\n      </DropzoneTd>\n    </tr>\n  );\n}\n\nfunction DropzoneTd(props: TdProps) {\n  return (\n    <td\n      className=\"px-6 text-sm font-medium whitespace-nowrap text-neutral-900\"\n      {...props}\n    />\n  );\n}\n","import { useState } from 'react';\nimport { DropzoneProps } from 'react-dropzone';\n\nexport interface DropzoneHookOptions extends Omit<DropzoneProps, 'onDrop'> {\n  replace?: boolean;\n}\n\nexport function useDropzone(options: DropzoneHookOptions) {\n  const { replace, ...dropzoneProps } = options;\n\n  const [files, setFiles] = useState<File[]>([]);\n\n  const onDrop = (newFiles: File[]) => {\n    if (replace) {\n      setFiles(newFiles);\n    } else {\n      const doesNotAlreadyExist = (newFile: File) => {\n        return files.filter((file) => newFile.name === file.name).length === 0;\n      };\n      setFiles(files.concat(newFiles.filter(doesNotAlreadyExist)));\n    }\n  };\n\n  const removeFile = (fileToRemove: File) => {\n    setFiles(files.filter((file) => file.name !== fileToRemove.name));\n  };\n\n  return {\n    dropzoneProps: {\n      ...dropzoneProps,\n      onDrop,\n    },\n    dropzoneListProps: {\n      files,\n      onRemove: removeFile,\n    },\n    files,\n    removeFile,\n  };\n}\n\nexport type SingleFileDropzoneHookConfig = Omit<\n  DropzoneHookOptions,\n  'replace' | 'maxFiles' | 'multiple'\n>;\n\nexport function useSingleFileDrozone(config: SingleFileDropzoneHookConfig) {\n  const droppedFiles = useDropzone({\n    replace: true,\n    maxFiles: 1,\n    multiple: false,\n    ...config,\n  });\n  return {\n    ...droppedFiles,\n    file: droppedFiles.dropzoneListProps.files[0] as File | undefined,\n  };\n}\n","import React, { useState } from 'react';\nimport Plot from './Info';\nimport { Dropzone } from './tailwind-ui/forms/basic/Dropzone';\nimport { DropzoneList } from './tailwind-ui/forms/basic/DropzoneList';\nimport { useSingleFileDrozone } from './tailwind-ui/hooks/useDropzone';\n\nexport default function App() {\n  const [text, setText] = useState<string | null>(null);\n  const {\n    dropzoneProps,\n    dropzoneListProps: { files, onRemove },\n  } = useSingleFileDrozone({\n    accept: '.csv',\n    maxSize: 10000000,\n  });\n\n  if (files[0]) {\n    const file = files[0];\n    file.text().then((text) => setText(text));\n  }\n\n  return (\n    <div className=\"bg-gray-100\">\n      <div className=\"max-w-lg mx-auto my-5\">\n        <Dropzone {...dropzoneProps} />\n        <DropzoneList\n          files={files}\n          onRemove={(file) => {\n            setText(null);\n            onRemove(file);\n          }}\n        />\n      </div>\n      {text && <Plot text={text} />}\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}